/* eslint-disable no-bitwise */
/* eslint-disable no-plusplus */
/* eslint-disable no-param-reassign */
// Refactored Emscripten glue
const Module = {};
const file = "data:application/wasm;base64,

const wasmTable = new WebAssembly.Table({
  initial: 1,
  maximum: 1 + 0,
  element: "anyfunc",
});

// Memory management
const WASM_PAGE_SIZE = 65536;
const DYNAMIC_BASE = 5244816;
const DYNAMICTOP_PTR = 1776;
const INITIAL_TOTAL_MEMORY = 16777216;

const wasmMemory = new WebAssembly.Memory({
  initial: INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE,
  maximum: INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE,
});
const { buffer } = wasmMemory;

const HEAP32 = new Int32Array(buffer);
const HEAPU8 = new Uint8Array(buffer);

HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;

const abort = (what) => { throw new WebAssembly.RuntimeError(what); };

// WASM instantiation
const asmLibraryArg = {
  __handle_stack_overflow: () => abort("stack overflow!"),
  __lock: () => { },
  __unlock: () => { },
  emscripten_get_sbrk_ptr: () => 1776,
  emscripten_memcpy_big: (dest, src, num) => HEAPU8.set(HEAPU8.subarray(src, src + num), dest),
  emscripten_resize_heap: () => abort("cannot grow memory!"),
  memory: wasmMemory,
  table: wasmTable,
};

const info = {
  env: asmLibraryArg,
  wasi_snapshot_preview1: asmLibraryArg,
};

WebAssembly
  .instantiateStreaming(fetch(file), info)
  .then((output) => {
    Module.asm = output.instance.exports;
  }, () => console.error("Failed to load"));

const stackSave = () => Module.asm.stackSave();
const stackAlloc = (len) => Module.asm.stackAlloc(len);
const stackRestore = (stack) => Module.asm.stackRestore(stack);
Module.md5_hex = (string) => Module.asm.md5_hex(string);

// String transforms
const UTF8ToString = (idx, maxBytesToRead) => {
  const endIdx = idx + maxBytesToRead;
  let endPtr = idx;
  while (HEAPU8[endPtr] && !(endPtr >= endIdx)) endPtr += 1;

  return new TextDecoder("utf8").decode(HEAPU8.subarray(idx, endPtr));
};

const stringToUTF8 = (str, outIdx, maxBytesToWrite) => {
  const startIdx = outIdx;
  const endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (let i = 0; i < str.length; ++i) {
    let u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      const u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      HEAPU8[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      HEAPU8[outIdx++] = 0xC0 | (u >> 6);
      HEAPU8[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      HEAPU8[outIdx++] = 0xE0 | (u >> 12);
      HEAPU8[outIdx++] = 0x80 | ((u >> 6) & 63);
      HEAPU8[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      HEAPU8[outIdx++] = 0xF0 | (u >> 18);
      HEAPU8[outIdx++] = 0x80 | ((u >> 12) & 63);
      HEAPU8[outIdx++] = 0x80 | ((u >> 6) & 63);
      HEAPU8[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  HEAPU8[outIdx] = 0;
  return outIdx - startIdx;
};

// main function
export const md5 = (input) => {
  const toCstring = (str) => {
    let ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      const len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  };

  const stack = stackSave();
  const ret = Module.md5_hex(toCstring(input));
  const result = UTF8ToString(ret);
  stackRestore(stack);
  return result;
};

export default md5;
